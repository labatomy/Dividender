// <auto-generated />
using System;
using Dividender.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dividender.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190715212800_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Divendender.Models.Indicators.RSI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TickerId");

                    b.Property<DateTime>("Time");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("RSIs");
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Dividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Shares");

                    b.Property<int>("TickerId");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Ticker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Tickers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "",
                            Symbol = "VYM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "",
                            Symbol = "BTI"
                        },
                        new
                        {
                            Id = 3,
                            Name = "",
                            Symbol = "ALB"
                        },
                        new
                        {
                            Id = 4,
                            Name = "",
                            Symbol = "LAZ"
                        },
                        new
                        {
                            Id = 5,
                            Name = "",
                            Symbol = "MMLP"
                        },
                        new
                        {
                            Id = 6,
                            Name = "",
                            Symbol = "HAL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "",
                            Symbol = "DOW"
                        },
                        new
                        {
                            Id = 8,
                            Name = "",
                            Symbol = "CC"
                        },
                        new
                        {
                            Id = 9,
                            Name = "",
                            Symbol = "OXY"
                        },
                        new
                        {
                            Id = 10,
                            Name = "",
                            Symbol = "AUY"
                        },
                        new
                        {
                            Id = 11,
                            Name = "",
                            Symbol = "PFF"
                        },
                        new
                        {
                            Id = 12,
                            Name = "",
                            Symbol = "FDP"
                        },
                        new
                        {
                            Id = 13,
                            Name = "",
                            Symbol = "PAAS"
                        },
                        new
                        {
                            Id = 14,
                            Name = "",
                            Symbol = "HTGC"
                        },
                        new
                        {
                            Id = 15,
                            Name = "",
                            Symbol = "ANDE"
                        },
                        new
                        {
                            Id = 16,
                            Name = "",
                            Symbol = "BK"
                        },
                        new
                        {
                            Id = 17,
                            Name = "",
                            Symbol = "TAP"
                        },
                        new
                        {
                            Id = 18,
                            Name = "",
                            Symbol = "BMY"
                        },
                        new
                        {
                            Id = 19,
                            Name = "",
                            Symbol = "VST"
                        },
                        new
                        {
                            Id = 20,
                            Name = "",
                            Symbol = "AGNC"
                        },
                        new
                        {
                            Id = 21,
                            Name = "",
                            Symbol = "IVZ"
                        },
                        new
                        {
                            Id = 22,
                            Name = "",
                            Symbol = "BHGE"
                        },
                        new
                        {
                            Id = 23,
                            Name = "",
                            Symbol = "AAL"
                        },
                        new
                        {
                            Id = 24,
                            Name = "",
                            Symbol = "PRU"
                        },
                        new
                        {
                            Id = 25,
                            Name = "",
                            Symbol = "SLB"
                        },
                        new
                        {
                            Id = 26,
                            Name = "",
                            Symbol = "MPC"
                        },
                        new
                        {
                            Id = 27,
                            Name = "",
                            Symbol = "BECN"
                        },
                        new
                        {
                            Id = 28,
                            Name = "",
                            Symbol = "THO"
                        },
                        new
                        {
                            Id = 29,
                            Name = "",
                            Symbol = "BTU"
                        },
                        new
                        {
                            Id = 30,
                            Name = "",
                            Symbol = "WY"
                        });
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("SellDate");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Shares");

                    b.Property<decimal?>("Target")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TickerId");

                    b.Property<int>("Transaction");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<decimal>("RSI")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("TickerId");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("Watchlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pandas List",
                            Name = "Panda",
                            RSI = 0m,
                            TickerId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Divendender.Models.Indicators.RSI", b =>
                {
                    b.HasOne("Dividender.Models.Portfolio.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Dividend", b =>
                {
                    b.HasOne("Dividender.Models.Portfolio.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Trade", b =>
                {
                    b.HasOne("Dividender.Models.Portfolio.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dividender.Models.Portfolio.Watchlist", b =>
                {
                    b.HasOne("Dividender.Models.Portfolio.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
